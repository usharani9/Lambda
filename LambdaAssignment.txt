1.
package lambda;

public interface Intref {
	public void cal(int a, int b) ;
	

}

package lambda;

public class Caluculator {

	public static void main(String[] args) {
		System.out.println("Addition of Numbers");
		Intref i = (a,b)->System.out.println(a+b);
		i.cal(5, 6);
		i.cal(5, 5);
		System.out.println("Subtraction of Numbers");
		Intref i1 = (a,b)->System.out.println(a-b);
		i1.cal(6, 5);
		i1.cal(5, 5);
		System.out.println("Multiplication of Numbers");
		Intref i2 = (a,b)-> System.out.println(a*b);
		i2.cal(5, 6);
		i2.cal(5, 5);
		System.out.println("Division of Numbers");
		Intref i3 = (a,b)->System.out.println(a/b);
		i3.cal(10, 2);
		i3.cal(100, 10);

	}


}


2.
package lambda;

public class Orders {
		double price;

		public double getPrice() {
			return price;
		}

		public void setPrice(double price) {
			this.price = price;
		}

		public Orders(double price) {
			super();
			this.price = price;
		}

		@Override
		public String toString() {
			return "Orders [price=" + price + "]";
		}
		
		
		
}
package lambda;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Order{
	
	public static void main(String[] args) {
		List<Orders> l = Arrays.asList(new Orders(5000),
				new Orders(15000),
				new Orders(25000));
				
		/*List<Orders> l = new ArrayList<>();
		l.add(new Orders(5000));
		l.add(new Orders(15000));
		l.add(new Orders(25000));*/
		l.stream().filter(o->o.getPrice()>10000).forEach(o->System.out.println("Orders is Placed"+o));
		
	}

}


3.
package lambda;
import java.util.function.*;
public class Consumer{

	public static void main(String[] args) {
		Consumer<Integer> c= i->System.out.println(i);
		Predicate<Integer> p = i->i>10;
		Function<Integer,Integer> f = i->i*i;
		Supplier<Double> s =()->Math.random();
		c.accept(9);
		System.out.println(p.test(6));
		System.out.println(f.apply(3));
		System.out.println(s.get()*10);
		}

}


4.
package lambda;

import java.util.*;

public class Remove{
	public static void main(String[] args) {
		List<String> l = new ArrayList<>();
		l.add("Nireekshan");
		l.add("Naruto");
		l.add("Luffy");
		l.add("Itadori");
		l.add("Jotaro");
		l.add("Nagato");
		System.out.println("Before using the removeIf "+l);
		l.removeIf(name->name.length()%2!=0);
		System.out.println("After using the removeIf "+l);
		
	}

}


5.
package lambda;

import java.util.ArrayList;
import java.util.List;
import java.util.function.*;

public class FirstLetter{
	public static void main(String[] args) {
		List<String> l = new ArrayList<>();
		l.add("Nireekshan");
		l.add("Itadori");
		l.add("Naruto");
		l.add("Jotaro");
		l.add("Aomine");
		
		StringBuilder sB= new StringBuilder();
		l.forEach(s->sB.append(s.charAt(0)));
		Consumer<StringBuilder> c = i->System.out.println(i);
		c.accept(sB);
		
	}

}

6.
package lambda;

import java.util.ArrayList;
import java.util.List;

public class Replace {
	public static void main(String[] args) {
		List<String> l = new ArrayList<>();
		l.add("nireekshan");
		l.add("itadori");
		l.add("naruto");
		l.add("jotaro");
		l.add("aomine");
		l.replaceAll(s->s.toUpperCase());
		System.out.println(l);
	}

}


7.
package lambda;

import java.util.*;

public class KeyValue{
	public static void main(String[] args) {
		Map<Integer,String> m = new HashMap<>();
		m.put(1, "Nireekshan");
		m.put(2, "Madara");
		m.put(3, "Obito");
		m.put(4, "Sauske");
		m.put(5, "Itachi");
		System.out.println(m.entrySet());
		StringBuilder mapAsString = new StringBuilder();
		for(Integer key:m.keySet()) {
			mapAsString.append(m.get(key));
		}
		System.out.println(mapAsString.delete(mapAsString.length()-2, mapAsString.length()).append(""));
		
		
	}
	
}

8.
package lambda;

import java.util.*;
import java.util.function.*;

public class Print{
	public static void main(String[] args) {
		Runnable r =()->{
			for(int i=0;i<=9;i++){
				System.out.println("From child Thread");
			}
		};
		Thread t = new Thread(r);
		t.start();
		for(int i =0;i<10;i++) {
			System.out.println("From the Main Thread "+i);
		}
	}

	
		
	

	
}

